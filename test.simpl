
#@import <io>
#@import <file>
#@directive ...

#@import "../file.simpl"

let x = new [1, 2, 3];
print(size(x));



println("### Comments ###");
println("# this is a comment");
println("");

println("Enter some text:");
let uv = getln();
println("You entered: " + uv);

### Comments ###
# this is a comment


### Features ###
println("### Features ###");

#a=empty;

println("## Logic");

if(0&&b) {
    println("won't print, & won't fail on the variable");
}

if(1 && 1) {
    println("should print");
}

if(0||1) {
    println("long or");
}

if(1||0) 
    println("short or");

if(0||0) {
    println("won't print");
}


## Equations

## Variables

# Declare a variable
let hw = "hello world!";
println(hw);

# I have loose typing so you can assign a number to a string, and vice versa
hw = 4+4;
println(hw);

# quack-quack
hw = "goodbye " + 4;
println(hw);

## Loops
let i=10;
println(i);
while(i>0)
{
    println("in a while crocodile");
    i = i-1;
}

# I don't have for loops yet
# for(let i=0; i<5; i=i+1); 

## Functions

### I can define a function
def foo(a,b)  {
    println(a);
    println(b);
    return "foo";
}

### I can call a function
println(foo("test",5));

foo(5, "hello");

### I even supports recursion
def recursive(i)  {
    println(i);
    if(i>0) {
        println("i am recursive");
        recursive(i-1);
    }
}

recursive(5);

### I have powerful pattern matching dynamic dispatch

def bar(a is string, b is number) {
    println("a is string, b is number");
}

def bar(a is number, b is number) {
    println("a is number, b is number");
}

def bar(a is file, b is string)
{
    println("a is file, b is string");
}

bar(f, "hello");

let a = "hello";
let b = 10;

bar(a,b);
a = 5;
bar(a,b);

### Work in Progress ###

println("## Arrays");
println("");

## Arrays
new [];
let my_array = new ["foo", 1, new {}, 4*4];
println(my_array[0]);
println(my_array[3]);

## Structures
let kh = new { name="king", suit="hearts" };
println(kh);
println(kh.name);
println(kh[suit]);

# kh.inner.inner.inner[inner];

# kh.name = "queen";

## add for the empty type & add additional branching
# if(is_empty(v)){}
# else if(...)
# else

## file I/O

let f = open_f("test.txt");
writeln(f, "test test test");
write(f, "not a new line");
close_f(f);

