
println("### Comments ###");
println("# this is a comment");
println("");

def foo(a is number, b is string)
{
    println("foo(is number, is string)");
}

### Comments ###
# this is a comment


### Features ###
println("### Features ###");


## Equations

## Variables

# Declare a variable
let hw = "hello world!";
println(hw);

# I have loose typing so you can assign a number to a string, and vice versa
hw = 4+4;
println(hw);

# quack-quack
hw = "goodbye " + 4;
println(hw);

## Loops
let i=10;
println(i);
while(i>0)
{
    println("in a while crocodile");
    i = i-1;
}

# I don't have for loops yet
# for(let i=0; i<5; ++i); 

## Functions

# I can define a function
def foo(a,b)  {
    println(a);
    println(b);
    return "foo";
}
# I can call a function
println(foo("test",5));

foo(5, "hello");

# I even supports recursion
def recursive(i)  {
    println(i);
    if(i>0) {
        println("i am recursive");
        recursive(i-1);
    }
}

recursive(5);

### Work in Progress ###

println("## Arrays");
println("");

## Arrays
new [];
let my_array = new ["foo", 1, new {}, 4*4];
println(my_array[0]);
println(my_array[3]);

## Structures
let kh = new { name="king", suit="hearts" };
println(kh);
println(kh.name);
println(kh[suit]);

# kh.inner.inner.inner[inner];

# kh.name = "queen";


## add boolean logic operators && ||, with short circuiting

## add empty_t keyword for the empty type & add additional branching
# if(v == empty_t){}
# else if(...)
# else

## logical && and ||

## file I/O

